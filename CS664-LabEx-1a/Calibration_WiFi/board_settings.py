# -*- coding: utf-8 -*-
'''
  Copyright (C) 2018 GT Silicon Pvt Ltd

  Licensed under the Creative Commons Attribution 4.0
  International Public License (the "CCBY4.0 License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  https://creativecommons.org/licenses/by/4.0/legalcode
'''
# Function stores the settings for the sensor being calibrated.
# Gets the board from input.
# Returns command for raw data, matrix and number of IMUs
#     Date     |    Review    |      Author                      |  Comments
# -------------+--------------+-----------------------------------------------------
#   21-08-2016 |    0.0       |   Rahul Tiwari                   | Initial Release

import tkMessageBox as tk
import numpy as np

# Target board specific parameters
def b_settings(target_board, com):
    if target_board == 'MIMU4444':
        nr_imus = 32
        c_nom = [[1, 0, 0,   0, 1, 0,   0, 0, 1,   1, 0, 0,   0, 1, 0,   0, 0, 1],
                 [0, -1, 0,  -1, 0, 0,  0, 0, -1,  0, -1, 0,  -1, 0, 0,  0, 0, -1],
                 [1, 0, 0,   0, 1, 0,   0, 0, 1,   1, 0, 0,   0, 1, 0,   0, 0, 1],
                 [0, -1, 0,  -1, 0, 0,  0, 0, -1,  0, -1, 0,  -1, 0, 0,  0, 0, -1],
                 [1, 0, 0,   0, 1, 0,   0, 0, 1,   1, 0, 0,   0, 1, 0,   0, 0, 1],
                 [0, -1, 0,  -1, 0, 0,  0,0, -1,  0, -1, 0,  -1, 0, 0,  0, 0, -1],
                 [1, 0, 0,   0, 1, 0,   0, 0, 1,   1, 0, 0,   0, 1, 0,   0, 0, 1],
                 [0, -1, 0,  -1, 0, 0,  0,0, -1,  0, -1, 0,  -1, 0, 0,  0, 0, -1],
                 [1, 0, 0,   0, 1, 0,   0, 0, 1,   1, 0, 0,   0, 1, 0,   0, 0, 1],
                 [0, -1, 0,  -1, 0, 0,  0,0, -1,  0, -1, 0,  -1, 0, 0,  0, 0, -1],
                 [1, 0, 0,   0, 1, 0,   0, 0, 1,   1, 0, 0,   0, 1, 0,   0, 0,1,],
                 [0, -1, 0,  -1, 0, 0,  0, 0, -1,  0, -1, 0,  -1, 0, 0,  0, 0, -1],
                 [1, 0, 0,   0, 1, 0,   0, 0, 1,   1, 0, 0,   0, 1, 0,   0, 0, 1],
                 [0, -1, 0,  -1, 0, 0,  0, 0, -1,  0, -1, 0,  -1, 0, 0,  0, 0, -1],
                 [1, 0, 0,   0, 1, 0,   0, 0, 1,   1, 0, 0,   0, 1, 0,   0, 0, 1],
                 [0, -1, 0,  -1, 0, 0,  0, 0, -1,  0, -1, 0,  -1, 0, 0,  0, 0, -1],
                 [1, 0, 0,   0, 1, 0,   0, 0, 1,   1, 0, 0,   0, 1, 0,   0, 0, 1],
                 [0, -1, 0,  -1, 0, 0,  0, 0, -1,  0, -1, 0,  -1, 0, 0,  0, 0, -1],
                 [1, 0, 0,   0, 1, 0,   0, 0, 1,   1, 0, 0,   0, 1, 0,   0, 0, 1],
                 [0, -1, 0,  -1, 0, 0,  0, 0, -1,  0, -1, 0,  -1, 0, 0,  0, 0, -1],
                 [1, 0, 0,   0, 1, 0,   0, 0, 1,   1, 0, 0,   0, 1, 0,   0, 0, 1],
                 [0, -1, 0,  -1, 0, 0,  0, 0, -1,  0, -1, 0,  -1, 0, 0,  0, 0, -1],
                 [1, 0, 0,   0, 1, 0,   0, 0, 1,   1, 0, 0,   0, 1, 0,   0, 0, 1],
                 [0, -1, 0,  -1, 0, 0,  0, 0, -1,  0, -1, 0,  -1, 0, 0,  0, 0, -1],
                 [1, 0, 0,  0, 1, 0,   0, 0, 1,   1, 0, 0,  0, 1, 0,   0, 0, 1],
                 [0, -1, 0,  -1, 0, 0,  0, 0, -1,  0,-1, 0,  -1, 0, 0,  0, 0, -1],
                 [1, 0, 0,   0, 1, 0,   0, 0, 1,   1, 0, 0,   0, 1, 0,   0, 0, 1],
                 [0, -1, 0,  -1, 0, 0, 0, 0, -1,  0, -1, 0,  -1, 0, 0,  0, 0, -1],
                 [1, 0, 0,   0, 1, 0,   0, 0, 1,  1, 0, 0,   0, 1, 0,   0, 0, 1],
                 [0, -1, 0,  -1, 0, 0, 0, 0, -1,  0, -1, 0,  -1, 0, 0,  0, 0, -1],
                 [1, 0, 0,   0, 1, 0,   0, 0, 1,   1, 0, 0,   0, 1, 0,   0, 0, 1],
                 [0, -1, 0,  -1, 0, 0,  0, 0, -1,  0, -1, 0,  -1, 0, 0,  0, 0, -1],]
        C_nom = np.reshape(c_nom,(32,18))
        command = [40, 255, 255, 255, 255, 1+64, 4, 37+64]
        return [nr_imus, C_nom, command]

    elif target_board == 'MIMU4444BT':
        nr_imus = 32
        c_nom = [[1, 0, 0,  0, 1, 0,  0, 0, 1,  1, 0, 0,  0, 1, 0,  0, 0, 1],
                 [0, -1, 0,  -1, 0, 0,  0, 0, -1,  0, -1, 0,  -1, 0, 0,  0, 0, -1],
                 [0, -1, 0,  -1, 0, 0,  0, 0, -1,  0, -1, 0,  -1, 0, 0,  0, 0, -1],
                 [1, 0, 0,  0, 1, 0,  0, 0, 1,  1, 0, 0,  0, 1, 0,  0, 0, 1],
                 [0, -1, 0,  -1, 0, 0,  0, 0, -1,  0, -1, 0,  -1, 0, 0,  0, 0, -1],
                 [1, 0, 0,  0, 1, 0,  0, 0, 1,  1, 0, 0,  0, 1, 0,  0, 0, 1],
                 [0, -1, 0,  -1, 0, 0,  0, 0, -1,  0, -1, 0,  -1, 0, 0, 0, 0, -1],
                 [1, 0, 0,  0, 1, 0,  0, 0, 1,  1, 0, 0,  0, 1, 0,  0, 0, 1],
                 [0, -1, 0,  -1, 0, 0,  0, 0, -1,  0, -1, 0,  -1, 0, 0,  0, 0, -1],
                 [1, 0, 0,  0, 1, 0,  0, 0, 1,  1, 0, 0,  0, 1, 0,  0, 0, 1],
                 [0, -1, 0,  -1, 0, 0,  0, 0, -1,  0, -1, 0,  -1, 0, 0,  0, 0, -1],
                 [1, 0, 0,  0, 1, 0,  0, 0, 1,  1, 0, 0,  0, 1, 0,  0, 0, 1],
                 [0, -1, 0,  -1, 0, 0,  0, 0, -1,  0, -1, 0,  -1, 0, 0,  0, 0, -1],
                 [1, 0, 0,  0, 1, 0,  0, 0, 1,  1, 0, 0,  0, 1, 0, 0, 0, 1],
                 [0, -1, 0,  -1, 0, 0,  0, 0, -1,  0, -1, 0,  -1, 0, 0,  0, 0, -1],
                 [1, 0, 0,  0, 1, 0,  0, 0, 1,  1, 0, 0,  0, 1, 0,  0, 0, 1],
                 [0, -1, 0,  -1, 0, 0,  0, 0, -1,  0, -1, 0,  -1, 0, 0,  0, 0, -1],
                 [1, 0, 0,  0, 1, 0,  0, 0, 1,  1, 0, 0,  0, 1, 0,  0, 0, 1],
                 [0, -1, 0,  -1, 0, 0,  0, 0, -1,  0, -1, 0,  -1, 0, 0,  0, 0, -1],
                 [1, 0, 0,  0, 1, 0,  0, 0, 1,  1, 0, 0,  0, 1, 0,  0, 0, 1],
                 [0, -1, 0,  -1, 0, 0,  0, 0, -1,  0, -1, 0,  -1, 0, 0,  0, 0, -1],
                 [1, 0, 0,  0, 1, 0,  0, 0, 1,  1, 0, 0,  0, 1, 0, 0, 0, 1],
                 [0, -1, 0,  -1, 0, 0,  0, 0, -1,  0, -1, 0,  -1, 0, 0,  0, 0, -1],
                 [1, 0, 0,  0, 1, 0,  0, 0, 1,  1, 0, 0,  0, 1, 0, 0, 0, 1],
                 [0, -1, 0,  -1, 0, 0,  0, 0, -1,  0, -1, 0,  -1, 0, 0,  0, 0, -1],
                 [1, 0, 0,  0, 1, 0,  0, 0, 1,  1, 0, 0, 0, 1, 0,  0, 0, 1],
                 [0, -1, 0,  -1, 0, 0,  0, 0, -1,  0, -1, 0,  -1, 0, 0,  0, 0, -1],
                 [1, 0, 0,  0, 1, 0,  0, 0, 1,  1, 0, 0,  0, 1, 0,  0, 0, 1],
                 [0, -1, 0,  -1, 0, 0,  0, 0, -1,  0, -1, 0,  -1, 0, 0,  0, 0,- 1],
                 [1, 0, 0,  0, 1, 0,  0, 0, 1,  1, 0, 0,  0, 1, 0,  0, 0, 1],
                 [1, 0, 0,  0, 1, 0,  0, 0, 1,  1, 0, 0,  0, 1, 0,  0, 0, 1],
                 [0, -1, 0,  -1, 0, 0,  0, 0, -1,  0, -1, 0,  -1, 0, 0,  0, 0, -1],]
        C_nom = np.reshape(c_nom, (32, 18))
        command = [40, 255, 255, 255, 255, 6+64, 4, 42+64]
        return [nr_imus, C_nom, command]

    elif  target_board == 'MIMU3333':
        nr_imus = 14
        c_nom = [[1,0,0,  0,1,0,  0,0,1,  1,0,0,  0,1,0,  0,0,1],
                 [1,0,0,  0,1,0,  0,0,1,  1,0,0,  0,1,0,  0,0,1],
                 [1,0,0,  0,1,0,  0,0,1,  1,0,0,  0,1,0,  0,0,1],
                 [1,0,0,  0,1,0,  0,0,1,  1,0,0,  0,1,0,  0,0,1],
                 [1,0,0,  0,1,0,  0,0,1,  1,0,0,  0,1,0,  0,0,1],
                 [1,0,0,  0,1,0,  0,0,1,  1,0,0,  0,1,0,  0,0,1],
                 [1,0,0,  0,1,0,  0,0,1,  1,0,0,  0,1,0,  0,0,1],
                 [1,0,0,  0,1,0,  0,0,1,  1,0,0,  0,1,0,  0,0,1],
                 [0,-1,0,  -1,0,0,  0,0,-1,  0,-1,0,  -1,0,0,  0,0,-1],
                 [0,-1,0,  -1,0,0,  0,0,-1,  0,-1,0,  -1,0,0,  0,0,-1],
                 [0,-1,0,  -1,0,0,  0,0,-1,  0,-1,0,  -1,0,0,  0,0,-1],
                 [0,-1,0,  -1,0,0,  0,0,-1,  0,-1,0,  -1,0,0,  0,0,-1],
                 [0,-1,0,  -1,0,0,  0,0,-1,  0,-1,0,  -1,0,0,  0,0,-1],
                 [0,-1,0,  -1,0,0,  0,0,-1,  0,-1,0,  -1,0,0,  0,0,-1],]
        C_nom = np.reshape(c_nom, (14, 18))
        command = [40, 0, 3, 155, 127, 1+64, 1, 70+64]
        return [nr_imus, C_nom, command]

    elif target_board == 'MIMU22BT':
        nr_imus = 4
        c_nom = [[1, 0, 0,  0, 1, 0,  0, 0, 1,  1, 0, 0,  0, 1, 0,  0, 0, 1],
                 [0, -1, 0,  -1, 0, 0,  0, 0, -1,  0, -1, 0,  -1, 0, 0,  0, 0, -1],
                 [1, 0, 0,  0, 1, 0,  0, 0, 1,  1, 0, 0,  0, 1, 0,  0, 0, 1],
                 [0, -1, 0,  -1, 0, 0,  0, 0, -1,  0, -1, 0,  -1, 0, 0,  0, 0, -1]]
        C_nom = np.reshape(c_nom, (4, 18))
        command = [40, 0, 0, 0, 15, 5+64, 0, 60+64] #bluetooth
        return [nr_imus, C_nom, command]

    elif target_board == 'OBLU':
        nr_imus = 4
        c_nom = [[1, 0, 0,  0, 1, 0,  0, 0, 1,  1, 0, 0,  0, 1, 0,  0, 0, 1],
                 [1, 0, 0,  0, 1, 0,  0, 0, 1,  1, 0, 0,  0, 1, 0,  0, 0, 1],
                 [1, 0, 0,  0, 1, 0,  0, 0, 1,  1, 0, 0,  0, 1, 0,  0, 0, 1],
                 [1, 0, 0,  0, 1, 0,  0, 0, 1,  1, 0, 0,  0, 1, 0,  0, 0, 1]]
        C_nom = np.reshape(c_nom, (4, 18))
        command = [40, 0, 0, 0, 15, 3+64, 0, 58+64] #bluetooth
        return [nr_imus, C_nom, command]


    else:
        tk.showerror("Oops !", 'Target board not recognized. Aborting calibration')
        com.close()
        return [0,0,0]
